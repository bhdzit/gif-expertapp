{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifsGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setcategory","useState","inputValue","setinputValue","onSubmit","e","preventDefault","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","titel","title","images","downsized_medium","GifsGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","setTimeout","useFetchGifs","GifExpertApp","categorys","ReactDOM","render","document","getElementById"],"mappings":"yMA6BeA,MA3Bf,YAAuC,IAAhBC,EAAe,EAAfA,YAAe,EAEEC,mBAAS,IAFX,mBAE3BC,EAF2B,KAEfC,EAFe,KAiBlC,OACI,sBAAMC,SATc,SAACC,GACrBA,EAAEC,iBACEJ,EAAWK,OAAS,IACpBP,GAAY,SAAAQ,GAAI,OAAKN,GAAL,mBAAmBM,OACnCL,EAAc,MAKlB,SACI,uBAAOM,KAAK,OAAOC,MAAOR,EAAYS,SAfrB,SAACN,GAEtBF,EAAcE,EAAEO,OAAOF,a,+BCRhBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEXC,EAFW,0FAE8EC,UAAUH,GAFxF,sBAGEI,MAAMF,GAHR,cAGXG,EAHW,gBAIMA,EAAKC,OAJX,uBAITC,EAJS,EAITA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EAEzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIG,MACXX,IAAG,UAAEQ,EAAII,cAAN,aAAE,EAAYC,iBAAiBb,QAXzB,kBAeVM,GAfU,4CAAH,sDCETQ,EAAe,SAAC,GAAiB,IAAhBd,EAAe,EAAfA,IAAIU,EAAW,EAAXA,MAE9B,OACI,sBAAKK,UAAU,OAAf,UACI,qBAAKC,IAAKhB,EAAKiB,IAAKP,IACpB,4BAAIA,QCHHQ,EAAU,SAAC,GAAkB,IAAD,ECDb,SAACpB,GAAc,IAAD,EAEZb,mBAAS,CAC/BoB,KAAM,GACNc,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAuBtC,OAfAC,qBAAU,WACNzB,EAAQC,GAAUyB,MACd,SAAAC,GACIC,YAAW,WACPJ,EAAS,CACLhB,KAAMmB,EACNL,SAAS,MAGf,UAIX,CAACrB,IAEGsB,EDnBkBM,CAHY,EAAf5B,UAGdc,EAH6B,EAGlCP,KAAYc,EAHsB,EAGtBA,QACf,OACI,qCACI,6BAAKA,GAAU,gBACf,qBAAKJ,UAAU,YAAf,SAIYH,EAAOL,KAAI,SAACC,GAAD,OACP,cAAC,EAAD,eAA+BA,GAAZA,EAAIC,aEWpCkB,EAtBM,WAAO,IAAD,EAEU1C,mBAAS,CAAC,cAFpB,mBAEhB2C,EAFgB,KAEL5C,EAFK,KAMvB,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,YAAaA,IAC1B,uBACA,6BAEQ4C,EAAUrB,KAAI,SAAAT,GAAQ,OAClB,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,YCdtC+B,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,W","file":"static/js/main.c3ffa081.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\nfunction AddCategory({ setcategory }) {\r\n\r\n    const [inputValue, setinputValue] = useState('');\r\n\r\n    const hanleInputChange = (e) => {\r\n\r\n        setinputValue(e.target.value);\r\n    }\r\n\r\n    const hanledSumitForm = (e) => {\r\n        e.preventDefault();\r\n        if (inputValue.length > 0) {\r\n            setcategory(cats => [inputValue,...cats]);\r\n            setinputValue(\"\");\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={hanledSumitForm}>\r\n            <input type=\"text\" value={inputValue} onChange={hanleInputChange} />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes={\r\n  setcategory:  PropTypes.func.isRequired\r\n}\r\nexport default AddCategory;\r\n","  export const getGifs = async (category) => {\r\n\r\n        const url = `https://api.giphy.com/v1/gifs/search?api_key=HIe6DRQYbpPhlSBf9teJst6oa0fD0jse&q=${encodeURI(category)}&limit=10`;\r\n        const resp = await fetch(url);\r\n        const { data } = await resp.json();\r\n\r\n        const gifs = data.map(img => {\r\n\r\n            return {\r\n                id: img.id,\r\n                titel: img.title,\r\n                url: img.images?.downsized_medium.url\r\n\r\n            }\r\n        });\r\n        return gifs;\r\n    }","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\nexport const GifsGridItem = ({url,titel}) => {\r\n   // console.log(url);\r\n    return (\r\n        <div className=\"card\">\r\n            <img src={url} alt={titel}/>   \r\n            <p>{titel}</p>    \r\n        </div>\r\n    )\r\n\r\n\r\n}\r\n\r\nGifsGridItem.propTypes={\r\n    titel:PropTypes.string.isRequired,\r\n    url:PropTypes.string.isRequired,\r\n}\r\n\r\n\r\n","\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifsGridItem } from './GifsGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n\r\nconst {data:images,loading}= useFetchGifs(category);\r\n    return (\r\n        <>\r\n            <h3>{loading &&\"Cargando...\"}</h3>\r\n            <div className=\"card-grid\">\r\n\r\n                \r\n                    {\r\n                        images.map((img) => (\r\n                            <GifsGridItem key={img.id} {...img} />\r\n                        ))\r\n\r\n\r\n                    }\r\n                \r\n\r\n                </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n\r\n    useEffect(() => {\r\n        getGifs(category).then(\r\n            imgs => {\r\n                setTimeout(()=>{\r\n                    setstate({\r\n                        data: imgs,\r\n                        loading: false\r\n\r\n                    })\r\n                },3000\r\n                )\r\n            }\r\n        )\r\n    }, [category])\r\n\r\n    return state;\r\n\r\n}","import { useState } from \"react\";\r\nimport AddCategory from \"./components/AddCategory\";\r\nimport { GifGrid } from \"./components/GifGrid\";\r\n\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    const [categorys, setcategory] = useState(['One Punch'])\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setcategory={setcategory} />\r\n            <hr />\r\n            <ol>\r\n                {\r\n                    categorys.map(category => (\r\n                        <GifGrid key={category} category={category} />\r\n                    ))\r\n                }\r\n            </ol>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(\n \n    <GifExpertApp />\n,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}